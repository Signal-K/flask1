{"ast":null,"code":"import _defineProperty from \"/Users/liamarbuckle/Documents/flask1/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/liamarbuckle/Documents/flask1/pages/[pageId].tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { NotionPage } from 'components';\nexport var __N_SSG = true;\nexport default function NotionDomainDynamicPage(props) {\n  return /*#__PURE__*/_jsxDEV(NotionPage, _objectSpread({}, props), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n}\n_c = NotionDomainDynamicPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotionDomainDynamicPage\");","map":{"version":3,"sources":["/Users/liamarbuckle/Documents/flask1/pages/[pageId].tsx"],"names":["React","NotionPage","NotionDomainDynamicPage","props"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,SAASC,UAAT,QAA2B,YAA3B;;AAoDA,eAAe,SAASC,uBAAT,CAAiCC,KAAjC,EAAwC;AACrD,sBAAO,QAAC,UAAD,oBAAgBA,KAAhB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;KAFuBD,uB","sourcesContent":["import React from 'react'\nimport { isDev, domain } from 'lib/config'\nimport { getSiteMaps } from 'lib/get-site-maps'\nimport { resolveNotionPage } from 'lib/resolve-notion-page'\nimport { NotionPage } from 'components'\n\nexport const getStaticProps = async (context) => {\n  const rawPageId = context.params.pageId as string\n\n  try {\n    if (rawPageId === 'sitemap.xml' || rawPageId === 'robots.txt') {\n      return {\n        redirect: {\n          destination: `/api/${rawPageId}`\n        }\n      }\n    }\n\n    const props = await resolveNotionPage(domain, rawPageId)\n\n    return { props, revalidate: 10 }\n  } catch (err) {\n    console.error('page error', domain, rawPageId, err)\n\n    // we don't want to publish the error version of this page, so\n    // let next.js know explicitly that incremental SSG failed\n    throw err\n  }\n}\n\nexport async function getStaticPaths() {\n  if (isDev) {\n    return {\n      paths: [],\n      fallback: true\n    }\n  }\n\n  const siteMaps = await getSiteMaps()\n\n  const ret = {\n    paths: siteMaps.flatMap((siteMap) =>\n      Object.keys(siteMap.canonicalPageMap).map((pageId) => ({\n        params: {\n          pageId\n        }\n      }))\n    ),\n    // paths: [],\n    fallback: true\n  }\n\n  console.log(ret.paths)\n  return ret\n}\n\nexport default function NotionDomainDynamicPage(props) {\n  return <NotionPage {...props} />\n}\n"]},"metadata":{},"sourceType":"module"}