{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/liamarbuckle/Documents/flask1/pages/_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// global styles shared across the entire site\nimport 'styles/global.css'; // core styles shared by all of react-notion-x (required)\n\nimport 'react-notion-x/src/styles.css'; // used for code syntax highlighting (optional)\n\nimport 'prismjs/themes/prism-coy.css'; // this might be better for dark mode\n// import 'prismjs/themes/prism-okaidia.css'\n// used for collection views selector (optional)\n// TODO: re-add if we enable collection view dropdowns\n// import 'rc-dropdown/assets/index.css'\n// used for rendering equations (optional)\n\nimport 'katex/dist/katex.min.css'; // core styles for static tweet renderer (optional)\n\nimport 'react-static-tweets/styles.css'; // global style overrides for notion\n\nimport 'styles/notion.css'; // global style overrides for prism theme (optional)\n\nimport 'styles/prism-theme.css'; // here we're bringing in any languages we want to support for\n// syntax highlighting via Notion's Code block\n\nimport 'prismjs';\nimport 'prismjs/components/prism-markup';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-typescript';\nimport 'prismjs/components/prism-bash';\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport { bootstrap } from 'lib/bootstrap-client';\nimport { fathomId, fathomConfig } from 'lib/config';\nimport * as Fathom from 'fathom-client';\n\nif (false) {\n  bootstrap();\n}\n\nexport default function App({\n  Component,\n  pageProps\n}) {\n  const router = useRouter();\n  React.useEffect(() => {\n    if (fathomId) {\n      Fathom.load(fathomId, fathomConfig);\n\n      function onRouteChangeComplete() {\n        Fathom.trackPageview();\n      }\n\n      router.events.on('routeChangeComplete', onRouteChangeComplete);\n      return () => {\n        router.events.off('routeChangeComplete', onRouteChangeComplete);\n      };\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, this);\n}","map":{"version":3,"sources":["/Users/liamarbuckle/Documents/flask1/pages/_app.tsx"],"names":["React","useRouter","bootstrap","fathomId","fathomConfig","Fathom","App","Component","pageProps","router","useEffect","load","onRouteChangeComplete","trackPageview","events","on","off"],"mappings":";;;;;;;;;AAAA;AACA,OAAO,mBAAP,C,CAEA;;AACA,OAAO,+BAAP,C,CAEA;;AACA,OAAO,8BAAP,C,CAEA;AACA;AAEA;AACA;AACA;AAEA;;AACA,OAAO,0BAAP,C,CAEA;;AACA,OAAO,gCAAP,C,CAEA;;AACA,OAAO,mBAAP,C,CAEA;;AACA,OAAO,wBAAP,C,CAEA;AACA;;AACA,OAAO,SAAP;AACA,OAAO,iCAAP;AACA,OAAO,qCAAP;AACA,OAAO,qCAAP;AACA,OAAO,+BAAP;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,YAAvC;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;;AAEA,WAAmC;AACjCH,EAAAA,SAAS;AACV;;AAED,eAAe,SAASI,GAAT,CAAa;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAb,EAAuC;AACpD,QAAMC,MAAM,GAAGR,SAAS,EAAxB;AAEAD,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpB,QAAIP,QAAJ,EAAc;AACZE,MAAAA,MAAM,CAACM,IAAP,CAAYR,QAAZ,EAAsBC,YAAtB;;AAEA,eAASQ,qBAAT,GAAiC;AAC/BP,QAAAA,MAAM,CAACQ,aAAP;AACD;;AAEDJ,MAAAA,MAAM,CAACK,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwCH,qBAAxC;AAEA,aAAO,MAAM;AACXH,QAAAA,MAAM,CAACK,MAAP,CAAcE,GAAd,CAAkB,qBAAlB,EAAyCJ,qBAAzC;AACD,OAFD;AAGD;AACF,GAdD,EAcG,EAdH;AAgBA,sBAAO,QAAC,SAAD,oBAAeJ,SAAf;AAAA;AAAA;AAAA;AAAA,UAAP;AACD","sourcesContent":["// global styles shared across the entire site\nimport 'styles/global.css'\n\n// core styles shared by all of react-notion-x (required)\nimport 'react-notion-x/src/styles.css'\n\n// used for code syntax highlighting (optional)\nimport 'prismjs/themes/prism-coy.css'\n\n// this might be better for dark mode\n// import 'prismjs/themes/prism-okaidia.css'\n\n// used for collection views selector (optional)\n// TODO: re-add if we enable collection view dropdowns\n// import 'rc-dropdown/assets/index.css'\n\n// used for rendering equations (optional)\nimport 'katex/dist/katex.min.css'\n\n// core styles for static tweet renderer (optional)\nimport 'react-static-tweets/styles.css'\n\n// global style overrides for notion\nimport 'styles/notion.css'\n\n// global style overrides for prism theme (optional)\nimport 'styles/prism-theme.css'\n\n// here we're bringing in any languages we want to support for\n// syntax highlighting via Notion's Code block\nimport 'prismjs'\nimport 'prismjs/components/prism-markup'\nimport 'prismjs/components/prism-javascript'\nimport 'prismjs/components/prism-typescript'\nimport 'prismjs/components/prism-bash'\n\nimport React from 'react'\nimport { useRouter } from 'next/router'\nimport { bootstrap } from 'lib/bootstrap-client'\nimport { fathomId, fathomConfig } from 'lib/config'\nimport * as Fathom from 'fathom-client'\n\nif (typeof window !== 'undefined') {\n  bootstrap()\n}\n\nexport default function App({ Component, pageProps }) {\n  const router = useRouter()\n\n  React.useEffect(() => {\n    if (fathomId) {\n      Fathom.load(fathomId, fathomConfig)\n\n      function onRouteChangeComplete() {\n        Fathom.trackPageview()\n      }\n\n      router.events.on('routeChangeComplete', onRouteChangeComplete)\n\n      return () => {\n        router.events.off('routeChangeComplete', onRouteChangeComplete)\n      }\n    }\n  }, [])\n\n  return <Component {...pageProps} />\n}\n"]},"metadata":{},"sourceType":"module"}