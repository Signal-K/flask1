{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { parsePageId } from 'notion-utils';\nimport * as acl from './acl';\nimport { pageUrlOverrides, pageUrlAdditions } from './config';\nimport { getPage } from './notion';\nimport { getSiteMaps } from './get-site-maps';\nimport { getSiteForDomain } from './get-site-for-domain';\nexport async function resolveNotionPage(domain, rawPageId) {\n  let site;\n  let pageId;\n  let recordMap;\n\n  if (rawPageId && rawPageId !== 'index') {\n    pageId = parsePageId(rawPageId);\n\n    if (!pageId) {\n      // check if the site configuration provides an override of a fallback for\n      // the page's URI\n      const override = pageUrlOverrides[rawPageId] || pageUrlAdditions[rawPageId];\n\n      if (override) {\n        pageId = parsePageId(override);\n      }\n    }\n\n    if (pageId) {\n      const resources = await Promise.all([getSiteForDomain(domain), getPage(pageId)]);\n      site = resources[0];\n      recordMap = resources[1];\n    } else {\n      // handle mapping of user-friendly canonical page paths to Notion page IDs\n      // e.g., /developer-x-entrepreneur versus /71201624b204481f862630ea25ce62fe\n      const siteMaps = await getSiteMaps();\n      const siteMap = siteMaps[0];\n      pageId = siteMap.canonicalPageMap[rawPageId];\n\n      if (pageId) {\n        // TODO: we're not re-using the site from siteMaps because it is\n        // cached aggressively\n        // site = await getSiteForDomain(domain)\n        // recordMap = siteMap.pageMap[pageId]\n        const resources = await Promise.all([getSiteForDomain(domain), getPage(pageId)]);\n        site = resources[0];\n        recordMap = resources[1];\n      } else {\n        return {\n          error: {\n            message: `Not found \"${rawPageId}\"`,\n            statusCode: 404\n          }\n        };\n      }\n    }\n  } else {\n    site = await getSiteForDomain(domain);\n    pageId = site.rootNotionPageId;\n    console.log(site);\n    recordMap = await getPage(pageId);\n  }\n\n  const props = {\n    site,\n    recordMap,\n    pageId\n  };\n  return _objectSpread(_objectSpread({}, props), await acl.pageAcl(props));\n}","map":{"version":3,"sources":["/Users/liamarbuckle/Documents/flask1/lib/resolve-notion-page.ts"],"names":["parsePageId","acl","pageUrlOverrides","pageUrlAdditions","getPage","getSiteMaps","getSiteForDomain","resolveNotionPage","domain","rawPageId","site","pageId","recordMap","override","resources","Promise","all","siteMaps","siteMap","canonicalPageMap","error","message","statusCode","rootNotionPageId","console","log","props","pageAcl"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,cAA5B;AAGA,OAAO,KAAKC,GAAZ,MAAqB,OAArB;AAEA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAmD,UAAnD;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AAEA,OAAO,eAAeC,iBAAf,CAAiCC,MAAjC,EAAiDC,SAAjD,EAAqE;AAC1E,MAAIC,IAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,SAAJ;;AAEA,MAAIH,SAAS,IAAIA,SAAS,KAAK,OAA/B,EAAwC;AACtCE,IAAAA,MAAM,GAAGX,WAAW,CAACS,SAAD,CAApB;;AAEA,QAAI,CAACE,MAAL,EAAa;AACX;AACA;AACA,YAAME,QAAQ,GACZX,gBAAgB,CAACO,SAAD,CAAhB,IAA+BN,gBAAgB,CAACM,SAAD,CADjD;;AAGA,UAAII,QAAJ,EAAc;AACZF,QAAAA,MAAM,GAAGX,WAAW,CAACa,QAAD,CAApB;AACD;AACF;;AAED,QAAIF,MAAJ,EAAY;AACV,YAAMG,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAY,CAClCV,gBAAgB,CAACE,MAAD,CADkB,EAElCJ,OAAO,CAACO,MAAD,CAF2B,CAAZ,CAAxB;AAKAD,MAAAA,IAAI,GAAGI,SAAS,CAAC,CAAD,CAAhB;AACAF,MAAAA,SAAS,GAAGE,SAAS,CAAC,CAAD,CAArB;AACD,KARD,MAQO;AACL;AACA;AACA,YAAMG,QAAQ,GAAG,MAAMZ,WAAW,EAAlC;AACA,YAAMa,OAAO,GAAGD,QAAQ,CAAC,CAAD,CAAxB;AACAN,MAAAA,MAAM,GAAGO,OAAO,CAACC,gBAAR,CAAyBV,SAAzB,CAAT;;AAEA,UAAIE,MAAJ,EAAY;AACV;AACA;AACA;AACA;AAEA,cAAMG,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAY,CAClCV,gBAAgB,CAACE,MAAD,CADkB,EAElCJ,OAAO,CAACO,MAAD,CAF2B,CAAZ,CAAxB;AAKAD,QAAAA,IAAI,GAAGI,SAAS,CAAC,CAAD,CAAhB;AACAF,QAAAA,SAAS,GAAGE,SAAS,CAAC,CAAD,CAArB;AACD,OAbD,MAaO;AACL,eAAO;AACLM,UAAAA,KAAK,EAAE;AACLC,YAAAA,OAAO,EAAG,cAAaZ,SAAU,GAD5B;AAELa,YAAAA,UAAU,EAAE;AAFP;AADF,SAAP;AAMD;AACF;AACF,GAnDD,MAmDO;AACLZ,IAAAA,IAAI,GAAG,MAAMJ,gBAAgB,CAACE,MAAD,CAA7B;AACAG,IAAAA,MAAM,GAAGD,IAAI,CAACa,gBAAd;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYf,IAAZ;AACAE,IAAAA,SAAS,GAAG,MAAMR,OAAO,CAACO,MAAD,CAAzB;AACD;;AAED,QAAMe,KAAK,GAAG;AAAEhB,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBD,IAAAA;AAAnB,GAAd;AACA,yCAAYe,KAAZ,GAAuB,MAAMzB,GAAG,CAAC0B,OAAJ,CAAYD,KAAZ,CAA7B;AACD","sourcesContent":["import { parsePageId } from 'notion-utils'\nimport { ExtendedRecordMap } from 'notion-types'\n\nimport * as acl from './acl'\nimport * as types from './types'\nimport { pageUrlOverrides, pageUrlAdditions } from './config'\nimport { getPage } from './notion'\nimport { getSiteMaps } from './get-site-maps'\nimport { getSiteForDomain } from './get-site-for-domain'\n\nexport async function resolveNotionPage(domain: string, rawPageId?: string) {\n  let site: types.Site\n  let pageId: string\n  let recordMap: ExtendedRecordMap\n\n  if (rawPageId && rawPageId !== 'index') {\n    pageId = parsePageId(rawPageId)\n\n    if (!pageId) {\n      // check if the site configuration provides an override of a fallback for\n      // the page's URI\n      const override =\n        pageUrlOverrides[rawPageId] || pageUrlAdditions[rawPageId]\n\n      if (override) {\n        pageId = parsePageId(override)\n      }\n    }\n\n    if (pageId) {\n      const resources = await Promise.all([\n        getSiteForDomain(domain),\n        getPage(pageId)\n      ])\n\n      site = resources[0]\n      recordMap = resources[1]\n    } else {\n      // handle mapping of user-friendly canonical page paths to Notion page IDs\n      // e.g., /developer-x-entrepreneur versus /71201624b204481f862630ea25ce62fe\n      const siteMaps = await getSiteMaps()\n      const siteMap = siteMaps[0]\n      pageId = siteMap.canonicalPageMap[rawPageId]\n\n      if (pageId) {\n        // TODO: we're not re-using the site from siteMaps because it is\n        // cached aggressively\n        // site = await getSiteForDomain(domain)\n        // recordMap = siteMap.pageMap[pageId]\n\n        const resources = await Promise.all([\n          getSiteForDomain(domain),\n          getPage(pageId)\n        ])\n\n        site = resources[0]\n        recordMap = resources[1]\n      } else {\n        return {\n          error: {\n            message: `Not found \"${rawPageId}\"`,\n            statusCode: 404\n          }\n        }\n      }\n    }\n  } else {\n    site = await getSiteForDomain(domain)\n    pageId = site.rootNotionPageId\n\n    console.log(site)\n    recordMap = await getPage(pageId)\n  }\n\n  const props = { site, recordMap, pageId }\n  return { ...props, ...(await acl.pageAcl(props)) }\n}\n"]},"metadata":{},"sourceType":"module"}