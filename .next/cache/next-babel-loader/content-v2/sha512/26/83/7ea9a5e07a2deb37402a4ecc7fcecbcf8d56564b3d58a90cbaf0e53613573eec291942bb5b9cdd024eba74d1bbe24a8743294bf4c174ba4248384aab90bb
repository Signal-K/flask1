{"ast":null,"code":"// import ky from 'ky'\nimport fetch from 'isomorphic-unfetch';\nimport pMemoize from 'p-memoize';\nimport { api } from './config';\nexport const searchNotion = pMemoize(searchNotionImpl, {\n  maxAge: 10000\n});\n\nasync function searchNotionImpl(params) {\n  return fetch(api.searchNotion, {\n    method: 'POST',\n    body: JSON.stringify(params),\n    headers: {\n      'content-type': 'application/json'\n    }\n  }).then(res => {\n    console.log(res);\n\n    if (res.ok) {\n      return res;\n    } // convert non-2xx HTTP responses into errors\n\n\n    const error = new Error(res.statusText);\n    error.response = res;\n    return Promise.reject(error);\n  }).then(res => res.json()); // return ky\n  //   .post(api.searchNotion, {\n  //     json: params\n  //   })\n  //   .json()\n}","map":{"version":3,"sources":["/Users/liamarbuckle/Documents/flask1/lib/search-notion.ts"],"names":["fetch","pMemoize","api","searchNotion","searchNotionImpl","maxAge","params","method","body","JSON","stringify","headers","then","res","console","log","ok","error","Error","statusText","response","Promise","reject","json"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,SAASC,GAAT,QAAoB,UAApB;AAGA,OAAO,MAAMC,YAAY,GAAGF,QAAQ,CAACG,gBAAD,EAAmB;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAnB,CAA7B;;AAEP,eAAeD,gBAAf,CACEE,MADF,EAEgC;AAC9B,SAAON,KAAK,CAACE,GAAG,CAACC,YAAL,EAAmB;AAC7BI,IAAAA,MAAM,EAAE,MADqB;AAE7BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAFuB;AAG7BK,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAHoB,GAAnB,CAAL,CAOJC,IAPI,CAOEC,GAAD,IAAS;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AAEA,QAAIA,GAAG,CAACG,EAAR,EAAY;AACV,aAAOH,GAAP;AACD,KALY,CAOb;;;AACA,UAAMI,KAAU,GAAG,IAAIC,KAAJ,CAAUL,GAAG,CAACM,UAAd,CAAnB;AACAF,IAAAA,KAAK,CAACG,QAAN,GAAiBP,GAAjB;AACA,WAAOQ,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACD,GAlBI,EAmBJL,IAnBI,CAmBEC,GAAD,IAASA,GAAG,CAACU,IAAJ,EAnBV,CAAP,CAD8B,CAsB9B;AACA;AACA;AACA;AACA;AACD","sourcesContent":["// import ky from 'ky'\nimport fetch from 'isomorphic-unfetch'\nimport pMemoize from 'p-memoize'\n\nimport { api } from './config'\nimport * as types from './types'\n\nexport const searchNotion = pMemoize(searchNotionImpl, { maxAge: 10000 })\n\nasync function searchNotionImpl(\n  params: types.SearchParams\n): Promise<types.SearchResults> {\n  return fetch(api.searchNotion, {\n    method: 'POST',\n    body: JSON.stringify(params),\n    headers: {\n      'content-type': 'application/json'\n    }\n  })\n    .then((res) => {\n      console.log(res)\n\n      if (res.ok) {\n        return res\n      }\n\n      // convert non-2xx HTTP responses into errors\n      const error: any = new Error(res.statusText)\n      error.response = res\n      return Promise.reject(error)\n    })\n    .then((res) => res.json())\n\n  // return ky\n  //   .post(api.searchNotion, {\n  //     json: params\n  //   })\n  //   .json()\n}\n"]},"metadata":{},"sourceType":"module"}