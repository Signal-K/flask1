{"ast":null,"code":"import _regeneratorRuntime from \"/Users/liamarbuckle/Documents/flask1/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/liamarbuckle/Documents/flask1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// import ky from 'ky'\nimport fetch from 'isomorphic-unfetch';\nimport pMemoize from 'p-memoize';\nimport { api } from './config';\nexport var searchNotion = pMemoize(searchNotionImpl, {\n  maxAge: 10000\n});\n\nfunction searchNotionImpl(_x) {\n  return _searchNotionImpl.apply(this, arguments);\n}\n\nfunction _searchNotionImpl() {\n  _searchNotionImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", fetch(api.searchNotion, {\n              method: 'POST',\n              body: JSON.stringify(params),\n              headers: {\n                'content-type': 'application/json'\n              }\n            }).then(function (res) {\n              console.log(res);\n\n              if (res.ok) {\n                return res;\n              } // convert non-2xx HTTP responses into errors\n\n\n              var error = new Error(res.statusText);\n              error.response = res;\n              return Promise.reject(error);\n            }).then(function (res) {\n              return res.json();\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _searchNotionImpl.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/liamarbuckle/Documents/flask1/lib/search-notion.ts"],"names":["fetch","pMemoize","api","searchNotion","searchNotionImpl","maxAge","params","method","body","JSON","stringify","headers","then","res","console","log","ok","error","Error","statusText","response","Promise","reject","json"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,SAASC,GAAT,QAAoB,UAApB;AAGA,OAAO,IAAMC,YAAY,GAAGF,QAAQ,CAACG,gBAAD,EAAmB;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAnB,CAA7B;;SAEQD,gB;;;;;+EAAf,iBACEE,MADF;AAAA;AAAA;AAAA;AAAA;AAAA,6CAGSN,KAAK,CAACE,GAAG,CAACC,YAAL,EAAmB;AAC7BI,cAAAA,MAAM,EAAE,MADqB;AAE7BC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAFuB;AAG7BK,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT;AAHoB,aAAnB,CAAL,CAOJC,IAPI,CAOC,UAACC,GAAD,EAAS;AACbC,cAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AAEA,kBAAIA,GAAG,CAACG,EAAR,EAAY;AACV,uBAAOH,GAAP;AACD,eALY,CAOb;;;AACA,kBAAMI,KAAU,GAAG,IAAIC,KAAJ,CAAUL,GAAG,CAACM,UAAd,CAAnB;AACAF,cAAAA,KAAK,CAACG,QAAN,GAAiBP,GAAjB;AACA,qBAAOQ,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACD,aAlBI,EAmBJL,IAnBI,CAmBC,UAACC,GAAD;AAAA,qBAASA,GAAG,CAACU,IAAJ,EAAT;AAAA,aAnBD,CAHT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// import ky from 'ky'\nimport fetch from 'isomorphic-unfetch'\nimport pMemoize from 'p-memoize'\n\nimport { api } from './config'\nimport * as types from './types'\n\nexport const searchNotion = pMemoize(searchNotionImpl, { maxAge: 10000 })\n\nasync function searchNotionImpl(\n  params: types.SearchParams\n): Promise<types.SearchResults> {\n  return fetch(api.searchNotion, {\n    method: 'POST',\n    body: JSON.stringify(params),\n    headers: {\n      'content-type': 'application/json'\n    }\n  })\n    .then((res) => {\n      console.log(res)\n\n      if (res.ok) {\n        return res\n      }\n\n      // convert non-2xx HTTP responses into errors\n      const error: any = new Error(res.statusText)\n      error.response = res\n      return Promise.reject(error)\n    })\n    .then((res) => res.json())\n\n  // return ky\n  //   .post(api.searchNotion, {\n  //     json: params\n  //   })\n  //   .json()\n}\n"]},"metadata":{},"sourceType":"module"}