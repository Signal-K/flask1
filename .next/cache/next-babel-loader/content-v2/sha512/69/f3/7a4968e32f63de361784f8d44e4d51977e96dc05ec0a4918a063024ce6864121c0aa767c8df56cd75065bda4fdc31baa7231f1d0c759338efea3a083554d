{"ast":null,"code":"import _defineProperty from \"/Users/liamarbuckle/Documents/flask1/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Site-wide app configuration.\n *\n * This file pulls from the root \"site.config.js\" as well as environment variables\n * for optional depenencies.\n */\nimport { parsePageId } from 'notion-utils';\nimport { getSiteConfig, getEnv } from './get-config-value';\nexport var rootNotionPageId = parsePageId(getSiteConfig('rootNotionPageId'), {\n  uuid: false\n});\n\nif (!rootNotionPageId) {\n  throw new Error('Config error invalid \"rootNotionPageId\"');\n} // if you want to restrict pages to a single notion workspace (optional)\n\n\nexport var rootNotionSpaceId = parsePageId(getSiteConfig('rootNotionSpaceId', null), {\n  uuid: true\n});\nexport var pageUrlOverrides = cleanPageUrlMap(getSiteConfig('pageUrlOverrides', {}) || {}, 'pageUrlOverrides');\nexport var inversePageUrlOverrides = invertPageUrlOverrides(pageUrlOverrides);\nexport var pageUrlAdditions = cleanPageUrlMap(getSiteConfig('pageUrlAdditions', {}) || {}, 'pageUrlAdditions'); // general site config\n\nexport var name = getSiteConfig('name');\nexport var author = getSiteConfig('author');\nexport var domain = getSiteConfig('domain');\nexport var description = getSiteConfig('description', 'Notion Blog'); // social accounts\n\nexport var twitter = getSiteConfig('twitter', null);\nexport var github = getSiteConfig('github', null);\nexport var linkedin = getSiteConfig('linkedin', null);\nexport var socialImageTitle = getSiteConfig('socialImageTitle', null);\nexport var socialImageSubtitle = getSiteConfig('socialImageSubtitle', null); // default notion values for site-wide consistency (optional; may be overridden on a per-page basis)\n\nexport var defaultPageIcon = getSiteConfig('defaultPageIcon', null);\nexport var defaultPageCover = getSiteConfig('defaultPageCover', null);\nexport var defaultPageCoverPosition = getSiteConfig('defaultPageCoverPosition', 0.5); // Optional utteranc.es comments via GitHub issue comments\n\nexport var utterancesGitHubRepo = getSiteConfig('utterancesGitHubRepo', null); // Optional image CDN host to proxy all image requests through\n\nexport var imageCDNHost = getSiteConfig('imageCDNHost', null); // Optional whether or not to enable support for LQIP preview images\n// (requires a Google Firebase collection)\n\nexport var isPreviewImageSupportEnabled = getSiteConfig('isPreviewImageSupportEnabled', false);\nexport var isDev = true || !\"development\"; // where it all starts -- the site's root Notion page\n\nexport var includeNotionIdInUrls = getSiteConfig('includeNotionIdInUrls', !!isDev); // ----------------------------------------------------------------------------\n\nexport var isServer = false;\nexport var port = getEnv('PORT', '3000');\nexport var host = isDev ? \"http://localhost:\".concat(port) : \"https://\".concat(domain);\nexport var apiBaseUrl = \"\".concat(host, \"/api\");\nexport var api = {\n  createPreviewImage: \"\".concat(apiBaseUrl, \"/create-preview-image\"),\n  searchNotion: \"\".concat(apiBaseUrl, \"/search-notion\")\n}; // ----------------------------------------------------------------------------\n\nexport var fathomId = isDev ? null : process.env.NEXT_PUBLIC_FATHOM_ID;\nexport var fathomConfig = fathomId ? {\n  excludedDomains: ['localhost', 'localhost:3000']\n} : undefined;\nvar defaultEnvValueForPreviewImageSupport = isPreviewImageSupportEnabled && isServer ? undefined : null;\nexport var googleProjectId = getEnv('GCLOUD_PROJECT', defaultEnvValueForPreviewImageSupport);\nexport var googleApplicationCredentials = getGoogleApplicationCredentials();\nexport var firebaseCollectionImages = getEnv('FIREBASE_COLLECTION_IMAGES', defaultEnvValueForPreviewImageSupport); // this hack is necessary because vercel doesn't support secret files so we need to encode our google\n// credentials a base64-encoded string of the JSON-ified content\n\nfunction getGoogleApplicationCredentials() {\n  if (!isPreviewImageSupportEnabled || !isServer) {\n    return null;\n  }\n\n  try {\n    var googleApplicationCredentialsBase64 = getEnv('GOOGLE_APPLICATION_CREDENTIALS', defaultEnvValueForPreviewImageSupport);\n    return JSON.parse(Buffer.from(googleApplicationCredentialsBase64, 'base64').toString());\n  } catch (err) {\n    console.error('Firebase config error: invalid \"GOOGLE_APPLICATION_CREDENTIALS\" should be base64-encoded JSON\\n');\n    throw err;\n  }\n}\n\nfunction cleanPageUrlMap(pageUrlMap, label) {\n  return Object.keys(pageUrlMap).reduce(function (acc, uri) {\n    var pageId = pageUrlMap[uri];\n    var uuid = parsePageId(pageId, {\n      uuid: false\n    });\n\n    if (!uuid) {\n      throw new Error(\"Invalid \".concat(label, \" page id \\\"\").concat(pageId, \"\\\"\"));\n    }\n\n    if (!uri) {\n      throw new Error(\"Missing \".concat(label, \" value for page \\\"\").concat(pageId, \"\\\"\"));\n    }\n\n    if (!uri.startsWith('/')) {\n      throw new Error(\"Invalid \".concat(label, \" value for page \\\"\").concat(pageId, \"\\\": value \\\"\").concat(uri, \"\\\" should be a relative URI that starts with \\\"/\\\"\"));\n    }\n\n    var path = uri.slice(1);\n    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, path, uuid));\n  }, {});\n}\n\nfunction invertPageUrlOverrides(pageUrlOverrides) {\n  return Object.keys(pageUrlOverrides).reduce(function (acc, uri) {\n    var pageId = pageUrlOverrides[uri];\n    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, pageId, uri));\n  }, {});\n}","map":{"version":3,"sources":["/Users/liamarbuckle/Documents/flask1/lib/config.ts"],"names":["parsePageId","getSiteConfig","getEnv","rootNotionPageId","uuid","Error","rootNotionSpaceId","pageUrlOverrides","cleanPageUrlMap","inversePageUrlOverrides","invertPageUrlOverrides","pageUrlAdditions","name","author","domain","description","twitter","github","linkedin","socialImageTitle","socialImageSubtitle","defaultPageIcon","defaultPageCover","defaultPageCoverPosition","utterancesGitHubRepo","imageCDNHost","isPreviewImageSupportEnabled","isDev","includeNotionIdInUrls","isServer","port","host","apiBaseUrl","api","createPreviewImage","searchNotion","fathomId","process","env","NEXT_PUBLIC_FATHOM_ID","fathomConfig","excludedDomains","undefined","defaultEnvValueForPreviewImageSupport","googleProjectId","googleApplicationCredentials","getGoogleApplicationCredentials","firebaseCollectionImages","googleApplicationCredentialsBase64","JSON","parse","Buffer","from","toString","err","console","error","pageUrlMap","label","Object","keys","reduce","acc","uri","pageId","startsWith","path","slice"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,QAA4B,cAA5B;AACA,SAASC,aAAT,EAAwBC,MAAxB,QAAsC,oBAAtC;AAGA,OAAO,IAAMC,gBAAwB,GAAGH,WAAW,CACjDC,aAAa,CAAC,kBAAD,CADoC,EAEjD;AAAEG,EAAAA,IAAI,EAAE;AAAR,CAFiD,CAA5C;;AAKP,IAAI,CAACD,gBAAL,EAAuB;AACrB,QAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD,C,CAED;;;AACA,OAAO,IAAMC,iBAAgC,GAAGN,WAAW,CACzDC,aAAa,CAAC,mBAAD,EAAsB,IAAtB,CAD4C,EAEzD;AAAEG,EAAAA,IAAI,EAAE;AAAR,CAFyD,CAApD;AAKP,OAAO,IAAMG,gBAAgB,GAAGC,eAAe,CAC7CP,aAAa,CAAC,kBAAD,EAAqB,EAArB,CAAb,IAAyC,EADI,EAE7C,kBAF6C,CAAxC;AAKP,OAAO,IAAMQ,uBAAuB,GAAGC,sBAAsB,CAACH,gBAAD,CAAtD;AAEP,OAAO,IAAMI,gBAAgB,GAAGH,eAAe,CAC7CP,aAAa,CAAC,kBAAD,EAAqB,EAArB,CAAb,IAAyC,EADI,EAE7C,kBAF6C,CAAxC,C,CAKP;;AACA,OAAO,IAAMW,IAAY,GAAGX,aAAa,CAAC,MAAD,CAAlC;AACP,OAAO,IAAMY,MAAc,GAAGZ,aAAa,CAAC,QAAD,CAApC;AACP,OAAO,IAAMa,MAAc,GAAGb,aAAa,CAAC,QAAD,CAApC;AACP,OAAO,IAAMc,WAAmB,GAAGd,aAAa,CAAC,aAAD,EAAgB,aAAhB,CAAzC,C,CAEP;;AACA,OAAO,IAAMe,OAAsB,GAAGf,aAAa,CAAC,SAAD,EAAY,IAAZ,CAA5C;AACP,OAAO,IAAMgB,MAAqB,GAAGhB,aAAa,CAAC,QAAD,EAAW,IAAX,CAA3C;AACP,OAAO,IAAMiB,QAAuB,GAAGjB,aAAa,CAAC,UAAD,EAAa,IAAb,CAA7C;AAEP,OAAO,IAAMkB,gBAA+B,GAAGlB,aAAa,CAC1D,kBAD0D,EAE1D,IAF0D,CAArD;AAIP,OAAO,IAAMmB,mBAAkC,GAAGnB,aAAa,CAC7D,qBAD6D,EAE7D,IAF6D,CAAxD,C,CAKP;;AACA,OAAO,IAAMoB,eAA8B,GAAGpB,aAAa,CACzD,iBADyD,EAEzD,IAFyD,CAApD;AAIP,OAAO,IAAMqB,gBAA+B,GAAGrB,aAAa,CAC1D,kBAD0D,EAE1D,IAF0D,CAArD;AAIP,OAAO,IAAMsB,wBAAgC,GAAGtB,aAAa,CAC3D,0BAD2D,EAE3D,GAF2D,CAAtD,C,CAKP;;AACA,OAAO,IAAMuB,oBAAmC,GAAGvB,aAAa,CAC9D,sBAD8D,EAE9D,IAF8D,CAAzD,C,CAKP;;AACA,OAAO,IAAMwB,YAA2B,GAAGxB,aAAa,CAAC,cAAD,EAAiB,IAAjB,CAAjD,C,CAEP;AACA;;AACA,OAAO,IAAMyB,4BAAqC,GAAGzB,aAAa,CAChE,8BADgE,EAEhE,KAFgE,CAA3D;AAKP,OAAO,IAAM0B,KAAK,GAChB,QAA0C,cADrC,C,CAGP;;AACA,OAAO,IAAMC,qBAA8B,GAAG3B,aAAa,CACzD,uBADyD,EAEzD,CAAC,CAAC0B,KAFuD,CAApD,C,CAKP;;AAEA,OAAO,IAAME,QAAQ,QAAd;AAEP,OAAO,IAAMC,IAAI,GAAG5B,MAAM,CAAC,MAAD,EAAS,MAAT,CAAnB;AACP,OAAO,IAAM6B,IAAI,GAAGJ,KAAK,8BAAuBG,IAAvB,sBAA2ChB,MAA3C,CAAlB;AAEP,OAAO,IAAMkB,UAAU,aAAMD,IAAN,SAAhB;AAEP,OAAO,IAAME,GAAG,GAAG;AACjBC,EAAAA,kBAAkB,YAAKF,UAAL,0BADD;AAEjBG,EAAAA,YAAY,YAAKH,UAAL;AAFK,CAAZ,C,CAKP;;AAEA,OAAO,IAAMI,QAAQ,GAAGT,KAAK,GAAG,IAAH,GAAUU,OAAO,CAACC,GAAR,CAAYC,qBAA5C;AAEP,OAAO,IAAMC,YAAY,GAAGJ,QAAQ,GAChC;AACEK,EAAAA,eAAe,EAAE,CAAC,WAAD,EAAc,gBAAd;AADnB,CADgC,GAIhCC,SAJG;AAMP,IAAMC,qCAAqC,GACzCjB,4BAA4B,IAAIG,QAAhC,GAA2Ca,SAA3C,GAAuD,IADzD;AAGA,OAAO,IAAME,eAAe,GAAG1C,MAAM,CACnC,gBADmC,EAEnCyC,qCAFmC,CAA9B;AAKP,OAAO,IAAME,4BAA4B,GAAGC,+BAA+B,EAApE;AAEP,OAAO,IAAMC,wBAAwB,GAAG7C,MAAM,CAC5C,4BAD4C,EAE5CyC,qCAF4C,CAAvC,C,CAKP;AACA;;AACA,SAASG,+BAAT,GAA2C;AACzC,MAAI,CAACpB,4BAAD,IAAiC,CAACG,QAAtC,EAAgD;AAC9C,WAAO,IAAP;AACD;;AAED,MAAI;AACF,QAAMmB,kCAAkC,GAAG9C,MAAM,CAC/C,gCAD+C,EAE/CyC,qCAF+C,CAAjD;AAKA,WAAOM,IAAI,CAACC,KAAL,CACLC,MAAM,CAACC,IAAP,CAAYJ,kCAAZ,EAAgD,QAAhD,EAA0DK,QAA1D,EADK,CAAP;AAGD,GATD,CASE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CACE,iGADF;AAIA,UAAMF,GAAN;AACD;AACF;;AAED,SAAS9C,eAAT,CACEiD,UADF,EAEEC,KAFF,EAGuB;AACrB,SAAOC,MAAM,CAACC,IAAP,CAAYH,UAAZ,EAAwBI,MAAxB,CAA+B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClD,QAAMC,MAAM,GAAGP,UAAU,CAACM,GAAD,CAAzB;AACA,QAAM3D,IAAI,GAAGJ,WAAW,CAACgE,MAAD,EAAS;AAAE5D,MAAAA,IAAI,EAAE;AAAR,KAAT,CAAxB;;AAEA,QAAI,CAACA,IAAL,EAAW;AACT,YAAM,IAAIC,KAAJ,mBAAqBqD,KAArB,wBAAuCM,MAAvC,QAAN;AACD;;AAED,QAAI,CAACD,GAAL,EAAU;AACR,YAAM,IAAI1D,KAAJ,mBAAqBqD,KAArB,+BAA8CM,MAA9C,QAAN;AACD;;AAED,QAAI,CAACD,GAAG,CAACE,UAAJ,CAAe,GAAf,CAAL,EAA0B;AACxB,YAAM,IAAI5D,KAAJ,mBACOqD,KADP,+BACgCM,MADhC,yBACmDD,GADnD,wDAAN;AAGD;;AAED,QAAMG,IAAI,GAAGH,GAAG,CAACI,KAAJ,CAAU,CAAV,CAAb;AAEA,2CACKL,GADL,2BAEGI,IAFH,EAEU9D,IAFV;AAID,GAxBM,EAwBJ,EAxBI,CAAP;AAyBD;;AAED,SAASM,sBAAT,CACEH,gBADF,EAE8B;AAC5B,SAAOoD,MAAM,CAACC,IAAP,CAAYrD,gBAAZ,EAA8BsD,MAA9B,CAAqC,UAACC,GAAD,EAAMC,GAAN,EAAc;AACxD,QAAMC,MAAM,GAAGzD,gBAAgB,CAACwD,GAAD,CAA/B;AAEA,2CACKD,GADL,2BAEGE,MAFH,EAEYD,GAFZ;AAID,GAPM,EAOJ,EAPI,CAAP;AAQD","sourcesContent":["/**\n * Site-wide app configuration.\n *\n * This file pulls from the root \"site.config.js\" as well as environment variables\n * for optional depenencies.\n */\n\nimport { parsePageId } from 'notion-utils'\nimport { getSiteConfig, getEnv } from './get-config-value'\nimport { PageUrlOverridesMap, PageUrlOverridesInverseMap } from './types'\n\nexport const rootNotionPageId: string = parsePageId(\n  getSiteConfig('rootNotionPageId'),\n  { uuid: false }\n)\n\nif (!rootNotionPageId) {\n  throw new Error('Config error invalid \"rootNotionPageId\"')\n}\n\n// if you want to restrict pages to a single notion workspace (optional)\nexport const rootNotionSpaceId: string | null = parsePageId(\n  getSiteConfig('rootNotionSpaceId', null),\n  { uuid: true }\n)\n\nexport const pageUrlOverrides = cleanPageUrlMap(\n  getSiteConfig('pageUrlOverrides', {}) || {},\n  'pageUrlOverrides'\n)\n\nexport const inversePageUrlOverrides = invertPageUrlOverrides(pageUrlOverrides)\n\nexport const pageUrlAdditions = cleanPageUrlMap(\n  getSiteConfig('pageUrlAdditions', {}) || {},\n  'pageUrlAdditions'\n)\n\n// general site config\nexport const name: string = getSiteConfig('name')\nexport const author: string = getSiteConfig('author')\nexport const domain: string = getSiteConfig('domain')\nexport const description: string = getSiteConfig('description', 'Notion Blog')\n\n// social accounts\nexport const twitter: string | null = getSiteConfig('twitter', null)\nexport const github: string | null = getSiteConfig('github', null)\nexport const linkedin: string | null = getSiteConfig('linkedin', null)\n\nexport const socialImageTitle: string | null = getSiteConfig(\n  'socialImageTitle',\n  null\n)\nexport const socialImageSubtitle: string | null = getSiteConfig(\n  'socialImageSubtitle',\n  null\n)\n\n// default notion values for site-wide consistency (optional; may be overridden on a per-page basis)\nexport const defaultPageIcon: string | null = getSiteConfig(\n  'defaultPageIcon',\n  null\n)\nexport const defaultPageCover: string | null = getSiteConfig(\n  'defaultPageCover',\n  null\n)\nexport const defaultPageCoverPosition: number = getSiteConfig(\n  'defaultPageCoverPosition',\n  0.5\n)\n\n// Optional utteranc.es comments via GitHub issue comments\nexport const utterancesGitHubRepo: string | null = getSiteConfig(\n  'utterancesGitHubRepo',\n  null\n)\n\n// Optional image CDN host to proxy all image requests through\nexport const imageCDNHost: string | null = getSiteConfig('imageCDNHost', null)\n\n// Optional whether or not to enable support for LQIP preview images\n// (requires a Google Firebase collection)\nexport const isPreviewImageSupportEnabled: boolean = getSiteConfig(\n  'isPreviewImageSupportEnabled',\n  false\n)\n\nexport const isDev =\n  process.env.NODE_ENV === 'development' || !process.env.NODE_ENV\n\n// where it all starts -- the site's root Notion page\nexport const includeNotionIdInUrls: boolean = getSiteConfig(\n  'includeNotionIdInUrls',\n  !!isDev\n)\n\n// ----------------------------------------------------------------------------\n\nexport const isServer = typeof window === 'undefined'\n\nexport const port = getEnv('PORT', '3000')\nexport const host = isDev ? `http://localhost:${port}` : `https://${domain}`\n\nexport const apiBaseUrl = `${host}/api`\n\nexport const api = {\n  createPreviewImage: `${apiBaseUrl}/create-preview-image`,\n  searchNotion: `${apiBaseUrl}/search-notion`\n}\n\n// ----------------------------------------------------------------------------\n\nexport const fathomId = isDev ? null : process.env.NEXT_PUBLIC_FATHOM_ID\n\nexport const fathomConfig = fathomId\n  ? {\n      excludedDomains: ['localhost', 'localhost:3000']\n    }\n  : undefined\n\nconst defaultEnvValueForPreviewImageSupport =\n  isPreviewImageSupportEnabled && isServer ? undefined : null\n\nexport const googleProjectId = getEnv(\n  'GCLOUD_PROJECT',\n  defaultEnvValueForPreviewImageSupport\n)\n\nexport const googleApplicationCredentials = getGoogleApplicationCredentials()\n\nexport const firebaseCollectionImages = getEnv(\n  'FIREBASE_COLLECTION_IMAGES',\n  defaultEnvValueForPreviewImageSupport\n)\n\n// this hack is necessary because vercel doesn't support secret files so we need to encode our google\n// credentials a base64-encoded string of the JSON-ified content\nfunction getGoogleApplicationCredentials() {\n  if (!isPreviewImageSupportEnabled || !isServer) {\n    return null\n  }\n\n  try {\n    const googleApplicationCredentialsBase64 = getEnv(\n      'GOOGLE_APPLICATION_CREDENTIALS',\n      defaultEnvValueForPreviewImageSupport\n    )\n\n    return JSON.parse(\n      Buffer.from(googleApplicationCredentialsBase64, 'base64').toString()\n    )\n  } catch (err) {\n    console.error(\n      'Firebase config error: invalid \"GOOGLE_APPLICATION_CREDENTIALS\" should be base64-encoded JSON\\n'\n    )\n\n    throw err\n  }\n}\n\nfunction cleanPageUrlMap(\n  pageUrlMap: PageUrlOverridesMap,\n  label: string\n): PageUrlOverridesMap {\n  return Object.keys(pageUrlMap).reduce((acc, uri) => {\n    const pageId = pageUrlMap[uri]\n    const uuid = parsePageId(pageId, { uuid: false })\n\n    if (!uuid) {\n      throw new Error(`Invalid ${label} page id \"${pageId}\"`)\n    }\n\n    if (!uri) {\n      throw new Error(`Missing ${label} value for page \"${pageId}\"`)\n    }\n\n    if (!uri.startsWith('/')) {\n      throw new Error(\n        `Invalid ${label} value for page \"${pageId}\": value \"${uri}\" should be a relative URI that starts with \"/\"`\n      )\n    }\n\n    const path = uri.slice(1)\n\n    return {\n      ...acc,\n      [path]: uuid\n    }\n  }, {})\n}\n\nfunction invertPageUrlOverrides(\n  pageUrlOverrides: PageUrlOverridesMap\n): PageUrlOverridesInverseMap {\n  return Object.keys(pageUrlOverrides).reduce((acc, uri) => {\n    const pageId = pageUrlOverrides[uri]\n\n    return {\n      ...acc,\n      [pageId]: uri\n    }\n  }, {})\n}\n"]},"metadata":{},"sourceType":"module"}