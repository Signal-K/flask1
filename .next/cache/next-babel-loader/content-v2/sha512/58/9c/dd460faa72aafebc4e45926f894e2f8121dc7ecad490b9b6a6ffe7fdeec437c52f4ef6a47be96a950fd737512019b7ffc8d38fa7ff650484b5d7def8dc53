{"ast":null,"code":"import _defineProperty from \"/Users/liamarbuckle/Documents/flask1/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/liamarbuckle/Documents/flask1/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/liamarbuckle/Documents/flask1/components/NotionPage.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport dynamic from 'next/dynamic';\nimport cs from 'classnames';\nimport { useRouter } from 'next/router';\nimport { useSearchParam } from 'react-use';\nimport BodyClassName from 'react-body-classname';\nimport useDarkMode from 'use-dark-mode';\nimport { Tweet, TwitterContextProvider } from 'react-static-tweets'; // core notion renderer\n\nimport { NotionRenderer, Code, Collection, CollectionRow } from 'react-notion-x'; // utils\n\nimport { getBlockTitle } from 'notion-utils';\nimport { mapPageUrl, getCanonicalPageUrl } from 'lib/map-page-url';\nimport { mapNotionImageUrl } from 'lib/map-image-url';\nimport { getPageDescription } from 'lib/get-page-description';\nimport { getPageTweet } from 'lib/get-page-tweet';\nimport { searchNotion } from 'lib/search-notion';\nimport * as config from 'lib/config'; // components\n\nimport { CustomFont } from './CustomFont';\nimport { Loading } from './Loading';\nimport { Page404 } from './Page404';\nimport { PageHead } from './PageHead';\nimport { PageActions } from './PageActions';\nimport { Footer } from './Footer';\nimport { PageSocial } from './PageSocial';\nimport { GitHubShareButton } from './GitHubShareButton';\nimport { ReactUtterances } from './ReactUtterances';\nimport styles from './styles.module.css'; // const Code = dynamic(() =>\n//   import('react-notion-x').then((notion) => notion.Code)\n// )\n//\n// const Collection = dynamic(() =>\n//   import('react-notion-x').then((notion) => notion.Collection)\n// )\n//\n// const CollectionRow = dynamic(\n//   () => import('react-notion-x').then((notion) => notion.CollectionRow),\n//   {\n//     ssr: false\n//   }\n// )\n\nvar Pdf = dynamic(_c = function _c() {\n  return import('react-notion-x').then(function (notion) {\n    return notion.Pdf;\n  });\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('react-notion-x')];\n    },\n    modules: ['react-notion-x']\n  }\n});\n_c2 = Pdf;\nvar Equation = dynamic(_c3 = function _c3() {\n  return import('react-notion-x').then(function (notion) {\n    return notion.Equation;\n  });\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('react-notion-x')];\n    },\n    modules: ['react-notion-x']\n  }\n}); // we're now using a much lighter-weight tweet renderer react-static-tweets\n// instead of the official iframe-based embed widget from twitter\n// const Tweet = dynamic(() => import('react-tweet-embed'))\n\n_c4 = Equation;\nvar Modal = dynamic(_c5 = function _c5() {\n  return import('react-notion-x').then(function (notion) {\n    return notion.Modal;\n  });\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('react-notion-x')];\n    },\n    modules: ['react-notion-x']\n  }\n});\n_c6 = Modal;\nexport var NotionPage = function NotionPage(_ref) {\n  _s();\n\n  var _recordMap$block, _recordMap$block$keys, _format, _getPageDescription;\n\n  var site = _ref.site,\n      recordMap = _ref.recordMap,\n      error = _ref.error,\n      pageId = _ref.pageId;\n  var router = useRouter();\n  var lite = useSearchParam('lite');\n  var params = {};\n  if (lite) params.lite = lite; // lite mode is for oembed\n\n  var isLiteMode = lite === 'true';\n  var searchParams = new URLSearchParams(params);\n  var darkMode = useDarkMode(false, {\n    classNameDark: 'dark-mode'\n  });\n\n  if (router.isFallback) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 12\n    }, _this);\n  }\n\n  var keys = Object.keys((recordMap === null || recordMap === void 0 ? void 0 : recordMap.block) || {});\n  var block = recordMap === null || recordMap === void 0 ? void 0 : (_recordMap$block = recordMap.block) === null || _recordMap$block === void 0 ? void 0 : (_recordMap$block$keys = _recordMap$block[keys[0]]) === null || _recordMap$block$keys === void 0 ? void 0 : _recordMap$block$keys.value;\n\n  if (error || !site || !keys.length || !block) {\n    return /*#__PURE__*/_jsxDEV(Page404, {\n      site: site,\n      pageId: pageId,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 12\n    }, _this);\n  }\n\n  var title = getBlockTitle(block, recordMap) || site.name;\n  console.log('notion page', {\n    isDev: config.isDev,\n    title: title,\n    pageId: pageId,\n    rootNotionPageId: site.rootNotionPageId,\n    recordMap: recordMap\n  });\n\n  if (!config.isServer) {\n    // add important objects to the window global for easy debugging\n    var g = window;\n    g.pageId = pageId;\n    g.recordMap = recordMap;\n    g.block = block;\n  }\n\n  var siteMapPageUrl = mapPageUrl(site, recordMap, searchParams);\n  var canonicalPageUrl = !config.isDev && getCanonicalPageUrl(site, recordMap)(pageId); // const isRootPage =\n  //   parsePageId(block.id) === parsePageId(site.rootNotionPageId)\n\n  var isBlogPost = block.type === 'page' && block.parent_table === 'collection';\n  var showTableOfContents = !!isBlogPost;\n  var minTableOfContentsItems = 3;\n  var socialImage = mapNotionImageUrl(((_format = block.format) === null || _format === void 0 ? void 0 : _format.page_cover) || config.defaultPageCover, block);\n  var socialDescription = (_getPageDescription = getPageDescription(block, recordMap)) !== null && _getPageDescription !== void 0 ? _getPageDescription : config.description;\n  var comments = null;\n  var pageAside = null; // only display comments and page actions on blog post pages\n\n  if (isBlogPost) {\n    if (config.utterancesGitHubRepo) {\n      comments = /*#__PURE__*/_jsxDEV(ReactUtterances, {\n        repo: config.utterancesGitHubRepo,\n        issueMap: \"issue-term\",\n        issueTerm: \"title\",\n        theme: darkMode.value ? 'photon-dark' : 'github-light'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, _this);\n    }\n\n    var tweet = getPageTweet(block, recordMap);\n\n    if (tweet) {\n      pageAside = /*#__PURE__*/_jsxDEV(PageActions, {\n        tweet: tweet\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 19\n      }, _this);\n    }\n  } else {\n    pageAside = /*#__PURE__*/_jsxDEV(PageSocial, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TwitterContextProvider, {\n    value: {\n      tweetAstMap: recordMap.tweetAstMap || {},\n      swrOptions: {\n        fetcher: function fetcher(id) {\n          return fetch(\"/api/get-tweet-ast/\".concat(id)).then(function (r) {\n            return r.json();\n          });\n        }\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(PageHead, {\n      site: site\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"meta\", {\n        property: \"og:title\",\n        content: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        property: \"og:site_name\",\n        content: site.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"twitter:title\",\n        content: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        property: \"twitter:domain\",\n        content: site.domain\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, _this), config.twitter && /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"twitter:creator\",\n        content: \"@\".concat(config.twitter)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, _this), socialDescription && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"meta\", {\n          name: \"description\",\n          content: socialDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          property: \"og:description\",\n          content: socialDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          name: \"twitter:description\",\n          content: socialDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true), socialImage ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"meta\", {\n          name: \"twitter:card\",\n          content: \"summary_large_image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          name: \"twitter:image\",\n          content: socialImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          property: \"og:image\",\n          content: socialImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"twitter:card\",\n        content: \"summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, _this), canonicalPageUrl && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"link\", {\n          rel: \"canonical\",\n          href: canonicalPageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          property: \"og:url\",\n          content: canonicalPageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          property: \"twitter:url\",\n          content: canonicalPageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"title\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CustomFont, {\n      site: site\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, _this), isLiteMode && /*#__PURE__*/_jsxDEV(BodyClassName, {\n      className: \"notion-lite\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 22\n    }, _this), /*#__PURE__*/_jsxDEV(NotionRenderer, {\n      bodyClassName: cs(styles.notion, pageId === site.rootNotionPageId && 'index-page'),\n      components: {\n        pageLink: function pageLink(_ref2) {\n          var href = _ref2.href,\n              as = _ref2.as,\n              passHref = _ref2.passHref,\n              prefetch = _ref2.prefetch,\n              replace = _ref2.replace,\n              scroll = _ref2.scroll,\n              shallow = _ref2.shallow,\n              locale = _ref2.locale,\n              props = _objectWithoutProperties(_ref2, [\"href\", \"as\", \"passHref\", \"prefetch\", \"replace\", \"scroll\", \"shallow\", \"locale\"]);\n\n          return /*#__PURE__*/_jsxDEV(Link, {\n            href: href,\n            as: as,\n            passHref: passHref,\n            prefetch: prefetch,\n            replace: replace,\n            scroll: scroll,\n            shallow: shallow,\n            locale: locale,\n            children: /*#__PURE__*/_jsxDEV(\"a\", _objectSpread({}, props), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, _this);\n        },\n        code: Code,\n        collection: Collection,\n        collectionRow: CollectionRow,\n        tweet: Tweet,\n        modal: Modal,\n        pdf: Pdf,\n        equation: Equation\n      },\n      recordMap: recordMap,\n      rootPageId: site.rootNotionPageId,\n      fullPage: !isLiteMode,\n      darkMode: darkMode.value,\n      previewImages: site.previewImages !== false,\n      showCollectionViewDropdown: false,\n      showTableOfContents: showTableOfContents,\n      minTableOfContentsItems: minTableOfContentsItems,\n      defaultPageIcon: config.defaultPageIcon,\n      defaultPageCover: config.defaultPageCover,\n      defaultPageCoverPosition: config.defaultPageCoverPosition,\n      mapPageUrl: siteMapPageUrl,\n      mapImageUrl: mapNotionImageUrl,\n      searchNotion: searchNotion,\n      pageFooter: comments,\n      pageAside: pageAside,\n      footer: /*#__PURE__*/_jsxDEV(Footer, {\n        isDarkMode: darkMode.value,\n        toggleDarkMode: darkMode.toggle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(GitHubShareButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(NotionPage, \"HmXQTu+CyFc+NO1QTgM027qiuhE=\", false, function () {\n  return [useRouter, useSearchParam, useDarkMode];\n});\n\n_c7 = NotionPage;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"Pdf$dynamic\");\n$RefreshReg$(_c2, \"Pdf\");\n$RefreshReg$(_c3, \"Equation$dynamic\");\n$RefreshReg$(_c4, \"Equation\");\n$RefreshReg$(_c5, \"Modal$dynamic\");\n$RefreshReg$(_c6, \"Modal\");\n$RefreshReg$(_c7, \"NotionPage\");","map":{"version":3,"sources":["/Users/liamarbuckle/Documents/flask1/components/NotionPage.tsx"],"names":["React","Head","Link","dynamic","cs","useRouter","useSearchParam","BodyClassName","useDarkMode","Tweet","TwitterContextProvider","NotionRenderer","Code","Collection","CollectionRow","getBlockTitle","mapPageUrl","getCanonicalPageUrl","mapNotionImageUrl","getPageDescription","getPageTweet","searchNotion","config","CustomFont","Loading","Page404","PageHead","PageActions","Footer","PageSocial","GitHubShareButton","ReactUtterances","styles","Pdf","then","notion","Equation","Modal","ssr","NotionPage","site","recordMap","error","pageId","router","lite","params","isLiteMode","searchParams","URLSearchParams","darkMode","classNameDark","isFallback","keys","Object","block","value","length","title","name","console","log","isDev","rootNotionPageId","isServer","g","window","siteMapPageUrl","canonicalPageUrl","isBlogPost","type","parent_table","showTableOfContents","minTableOfContentsItems","socialImage","format","page_cover","defaultPageCover","socialDescription","description","comments","pageAside","utterancesGitHubRepo","tweet","tweetAstMap","swrOptions","fetcher","id","fetch","r","json","domain","twitter","pageLink","href","as","passHref","prefetch","replace","scroll","shallow","locale","props","code","collection","collectionRow","modal","pdf","equation","previewImages","defaultPageIcon","defaultPageCoverPosition","toggle"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport Head from 'next/head'\nimport Link from 'next/link'\nimport dynamic from 'next/dynamic'\nimport cs from 'classnames'\nimport { useRouter } from 'next/router'\nimport { useSearchParam } from 'react-use'\nimport BodyClassName from 'react-body-classname'\nimport useDarkMode from 'use-dark-mode'\nimport { PageBlock } from 'notion-types'\n\nimport { Tweet, TwitterContextProvider } from 'react-static-tweets'\n\n// core notion renderer\nimport { NotionRenderer, Code, Collection, CollectionRow } from 'react-notion-x'\n\n// utils\nimport { getBlockTitle } from 'notion-utils'\nimport { mapPageUrl, getCanonicalPageUrl } from 'lib/map-page-url'\nimport { mapNotionImageUrl } from 'lib/map-image-url'\nimport { getPageDescription } from 'lib/get-page-description'\nimport { getPageTweet } from 'lib/get-page-tweet'\nimport { searchNotion } from 'lib/search-notion'\nimport * as types from 'lib/types'\nimport * as config from 'lib/config'\n\n// components\nimport { CustomFont } from './CustomFont'\nimport { Loading } from './Loading'\nimport { Page404 } from './Page404'\nimport { PageHead } from './PageHead'\nimport { PageActions } from './PageActions'\nimport { Footer } from './Footer'\nimport { PageSocial } from './PageSocial'\nimport { GitHubShareButton } from './GitHubShareButton'\nimport { ReactUtterances } from './ReactUtterances'\n\nimport styles from './styles.module.css'\n\n// const Code = dynamic(() =>\n//   import('react-notion-x').then((notion) => notion.Code)\n// )\n//\n// const Collection = dynamic(() =>\n//   import('react-notion-x').then((notion) => notion.Collection)\n// )\n//\n// const CollectionRow = dynamic(\n//   () => import('react-notion-x').then((notion) => notion.CollectionRow),\n//   {\n//     ssr: false\n//   }\n// )\n\nconst Pdf = dynamic(() => import('react-notion-x').then((notion) => notion.Pdf))\n\nconst Equation = dynamic(() =>\n  import('react-notion-x').then((notion) => notion.Equation)\n)\n\n// we're now using a much lighter-weight tweet renderer react-static-tweets\n// instead of the official iframe-based embed widget from twitter\n// const Tweet = dynamic(() => import('react-tweet-embed'))\n\nconst Modal = dynamic(\n  () => import('react-notion-x').then((notion) => notion.Modal),\n  { ssr: false }\n)\n\nexport const NotionPage: React.FC<types.PageProps> = ({\n  site,\n  recordMap,\n  error,\n  pageId\n}) => {\n  const router = useRouter()\n  const lite = useSearchParam('lite')\n\n  const params: any = {}\n  if (lite) params.lite = lite\n\n  // lite mode is for oembed\n  const isLiteMode = lite === 'true'\n  const searchParams = new URLSearchParams(params)\n\n  const darkMode = useDarkMode(false, { classNameDark: 'dark-mode' })\n\n  if (router.isFallback) {\n    return <Loading />\n  }\n\n  const keys = Object.keys(recordMap?.block || {})\n  const block = recordMap?.block?.[keys[0]]?.value\n\n  if (error || !site || !keys.length || !block) {\n    return <Page404 site={site} pageId={pageId} error={error} />\n  }\n\n  const title = getBlockTitle(block, recordMap) || site.name\n\n  console.log('notion page', {\n    isDev: config.isDev,\n    title,\n    pageId,\n    rootNotionPageId: site.rootNotionPageId,\n    recordMap\n  })\n\n  if (!config.isServer) {\n    // add important objects to the window global for easy debugging\n    const g = window as any\n    g.pageId = pageId\n    g.recordMap = recordMap\n    g.block = block\n  }\n\n  const siteMapPageUrl = mapPageUrl(site, recordMap, searchParams)\n\n  const canonicalPageUrl =\n    !config.isDev && getCanonicalPageUrl(site, recordMap)(pageId)\n\n  // const isRootPage =\n  //   parsePageId(block.id) === parsePageId(site.rootNotionPageId)\n  const isBlogPost =\n    block.type === 'page' && block.parent_table === 'collection'\n  const showTableOfContents = !!isBlogPost\n  const minTableOfContentsItems = 3\n\n  const socialImage = mapNotionImageUrl(\n    (block as PageBlock).format?.page_cover || config.defaultPageCover,\n    block\n  )\n\n  const socialDescription =\n    getPageDescription(block, recordMap) ?? config.description\n\n  let comments: React.ReactNode = null\n  let pageAside: React.ReactChild = null\n\n  // only display comments and page actions on blog post pages\n  if (isBlogPost) {\n    if (config.utterancesGitHubRepo) {\n      comments = (\n        <ReactUtterances\n          repo={config.utterancesGitHubRepo}\n          issueMap='issue-term'\n          issueTerm='title'\n          theme={darkMode.value ? 'photon-dark' : 'github-light'}\n        />\n      )\n    }\n\n    const tweet = getPageTweet(block, recordMap)\n    if (tweet) {\n      pageAside = <PageActions tweet={tweet} />\n    }\n  } else {\n    pageAside = <PageSocial />\n  }\n\n  return (\n    <TwitterContextProvider\n      value={{\n        tweetAstMap: (recordMap as any).tweetAstMap || {},\n        swrOptions: {\n          fetcher: (id) =>\n            fetch(`/api/get-tweet-ast/${id}`).then((r) => r.json())\n        }\n      }}\n    >\n      <PageHead site={site} />\n\n      <Head>\n        <meta property='og:title' content={title} />\n        <meta property='og:site_name' content={site.name} />\n\n        <meta name='twitter:title' content={title} />\n        <meta property='twitter:domain' content={site.domain} />\n\n        {config.twitter && (\n          <meta name='twitter:creator' content={`@${config.twitter}`} />\n        )}\n\n        {socialDescription && (\n          <>\n            <meta name='description' content={socialDescription} />\n            <meta property='og:description' content={socialDescription} />\n            <meta name='twitter:description' content={socialDescription} />\n          </>\n        )}\n\n        {socialImage ? (\n          <>\n            <meta name='twitter:card' content='summary_large_image' />\n            <meta name='twitter:image' content={socialImage} />\n            <meta property='og:image' content={socialImage} />\n          </>\n        ) : (\n          <meta name='twitter:card' content='summary' />\n        )}\n\n        {canonicalPageUrl && (\n          <>\n            <link rel='canonical' href={canonicalPageUrl} />\n            <meta property='og:url' content={canonicalPageUrl} />\n            <meta property='twitter:url' content={canonicalPageUrl} />\n          </>\n        )}\n\n        <title>{title}</title>\n      </Head>\n\n      <CustomFont site={site} />\n\n      {isLiteMode && <BodyClassName className='notion-lite' />}\n\n      <NotionRenderer\n        bodyClassName={cs(\n          styles.notion,\n          pageId === site.rootNotionPageId && 'index-page'\n        )}\n        components={{\n          pageLink: ({\n            href,\n            as,\n            passHref,\n            prefetch,\n            replace,\n            scroll,\n            shallow,\n            locale,\n            ...props\n          }) => (\n            <Link\n              href={href}\n              as={as}\n              passHref={passHref}\n              prefetch={prefetch}\n              replace={replace}\n              scroll={scroll}\n              shallow={shallow}\n              locale={locale}\n            >\n              <a {...props} />\n            </Link>\n          ),\n          code: Code,\n          collection: Collection,\n          collectionRow: CollectionRow,\n          tweet: Tweet,\n          modal: Modal,\n          pdf: Pdf,\n          equation: Equation\n        }}\n        recordMap={recordMap}\n        rootPageId={site.rootNotionPageId}\n        fullPage={!isLiteMode}\n        darkMode={darkMode.value}\n        previewImages={site.previewImages !== false}\n        showCollectionViewDropdown={false}\n        showTableOfContents={showTableOfContents}\n        minTableOfContentsItems={minTableOfContentsItems}\n        defaultPageIcon={config.defaultPageIcon}\n        defaultPageCover={config.defaultPageCover}\n        defaultPageCoverPosition={config.defaultPageCoverPosition}\n        mapPageUrl={siteMapPageUrl}\n        mapImageUrl={mapNotionImageUrl}\n        searchNotion={searchNotion}\n        pageFooter={comments}\n        pageAside={pageAside}\n        footer={\n          <Footer\n            isDarkMode={darkMode.value}\n            toggleDarkMode={darkMode.toggle}\n          />\n        }\n      />\n\n      <GitHubShareButton />\n    </TwitterContextProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}